// assets/js/admin-inline-edit.js
(function(){
  const rosterWrap = document.getElementById('rosterWrap');
  if (!rosterWrap) return;
  const mo = new MutationObserver(()=> maybeAdorn());
  mo.observe(rosterWrap, { childList:true, subtree:true });
  setTimeout(maybeAdorn, 1200);
  function adminKey(){ return document.getElementById('adminKey')?.value?.trim() || ''; }
  async function fetchData(){ const r = await fetch('/.netlify/functions/list_registrants'); const j = await r.json(); return Array.isArray(j.registrants)?j.registrants:[]; }
  let cache = null; let lastKey = '';
  async function ensureData(){ if (!cache) cache = await fetchData(); return cache; }
  function parseNameYear(text){ const m = text.match(/^(.+?)\s*\((\d{4})\)/); if (!m) return null; return { name:m[1].trim(), year:Number(m[2]) }; }
  function makeBtn(label,title){ const a=document.createElement('button'); a.type='button'; a.title=title||label; a.className='ml-2 text-xs px-2 py-0.5 rounded border bg-white hover:bg-slate-50'; a.textContent=label; return a; }
  function dlg(html){ const o=document.createElement('div'); o.className='fixed inset-0 z-50 bg-black/30 flex items-center justify-center p-4'; o.innerHTML=`<div class="bg-white rounded-xl p-4 max-w-md w-full ring-1 ring-slate-200">${html}</div>`; document.body.appendChild(o); function close(){o.remove()} o.addEventListener('click',e=>{if(e.target===o)close()}); return {o,close}; }
  async function updateItem(item,patch){ const r=await fetch('/.netlify/functions/update_registrant',{method:'POST',headers:{'Content-Type':'application/json','x-admin-key':adminKey()},body:JSON.stringify({keyOrEmail:item.email||item.key,patch})}); return r.json(); }
  async function deleteItem(item){ const r=await fetch('/.netlify/functions/delete_registrant',{method:'POST',headers:{'Content-Type':'application/json','x-admin-key':adminKey()},body:JSON.stringify({keyOrEmail:item.key||item.email})}); return r.json(); }
  async function pickOne(c){ if(c.length<=1) return c[0]||null; const rows=c.map((x,i)=>`<label class="flex items-center gap-2 p-2 rounded hover:bg-slate-50"><input type="radio" name="pick" value="${i}" ${i===0?'checked':''}/><div class="text-sm"><div class="font-semibold">${x.name} (${x.yearJoined||''})</div><div class="text-slate-600">${x.email||''} â€¢ ${x.packageName||''} $${x.packageAmount||''}</div></div></label>`).join(''); const {o,close}=dlg(`<h3 class="font-bold mb-2">Select a record</h3><div class="border rounded">${rows}</div><div class="mt-3 flex justify-end gap-2"><button id="c" class="px-3 py-2 rounded border bg-white">Cancel</button><button id="ok" class="px-3 py-2 rounded bg-[var(--pbs-royal)] text-white">Continue</button></div>`); return new Promise(res=>{o.querySelector('#c').onclick=()=>{close();res(null)};o.querySelector('#ok').onclick=()=>{const idx=Number(o.querySelector('input[name="pick"]:checked')?.value||0);const chosen=c[idx];close();res(chosen);};}); }
  function buildEditor(item){ const {o,close}=dlg(`<h3 class="font-bold mb-2">Edit registrant</h3><div class="grid gap-2 text-sm"><label class="grid"><span class="text-xs">Name</span><input id="edName" class="rounded border px-2 py-1" value="${(item.name||'').replace(/"/g,'&quot;')}"/></label><label class="grid"><span class="text-xs">Year Joined</span><input id="edYear" type="number" class="rounded border px-2 py-1" value="${item.yearJoined||''}"/></label><label class="grid"><span class="text-xs">Package Name</span><input id="edPkg" class="rounded border px-2 py-1" value="${(item.packageName||'').replace(/"/g,'&quot;')}"/></label><label class="grid"><span class="text-xs">Amount</span><input id="edAmt" type="number" class="rounded border px-2 py-1" value="${item.packageAmount||''}"/></label></div><div class="mt-3 flex justify-between"><button id="del" class="px-3 py-2 rounded border bg-white text-red-600">Delete</button><div class="flex gap-2"><button id="x" class="px-3 py-2 rounded border bg-white">Cancel</button><button id="save" class="px-3 py-2 rounded bg-[var(--pbs-royal)] text-white">Save</button></div></div><pre id="out" class="mt-2 text-xs text-slate-600"></pre>`); const out=o.querySelector('#out'); o.querySelector('#x').onclick=close; o.querySelector('#del').onclick=async()=>{out.textContent='Deletingâ€¦'; const r=await deleteItem(item); out.textContent=JSON.stringify(r,null,2); if(r&&r.ok!==false){ try{window.loadRoster&&window.loadRoster()}catch{} setTimeout(close,600);} }; o.querySelector('#save').onclick=async()=>{const patch={}; const nm=o.querySelector('#edName').value.trim(); const yr=o.querySelector('#edYear').value.trim(); const pk=o.querySelector('#edPkg').value.trim(); const am=o.querySelector('#edAmt').value.trim(); if(nm)patch.name=nm; if(yr)patch.yearJoined=Number(yr); if(pk)patch.packageName=pk; if(am)patch.packageAmount=Number(am); out.textContent='Savingâ€¦'; const r=await updateItem(item,patch); out.textContent=JSON.stringify(r,null,2); if(r&&r.ok!==false){ try{window.loadRoster&&window.loadRoster()}catch{} setTimeout(close,600);} }; }
  async function adornOne(li){ if(li.dataset._adm)return; const nameEl=li.querySelector('.font-medium')||li; const m=li.textContent.match(/^(.+?)\s*\((\d{4})\)/); if(!m)return; const name=m[1].trim(); const year=Number(m[2]); const data=await ensureData(); const matches=data.filter(r=>(r.name||'').toLowerCase()===name.toLowerCase()&&Number(r.yearJoined||0)===year); let item=matches[0]||null; if(matches.length>1){item=await pickOne(matches); if(!item)return;} const edit=makeBtn('âœŽ','Edit'); const del=makeBtn('ðŸ—‘','Delete'); const span=document.createElement('span'); span.className='ml-2 inline-flex'; span.appendChild(edit); span.appendChild(del); const nm=nameEl; nm ? nm.after(span) : li.appendChild(span); edit.onclick=()=>buildEditor(item); del.onclick=async()=>{ if(!confirm('Delete this registrant?')) return; const r=await deleteItem(item); if(r&&r.ok!==false){ try{window.loadRoster&&window.loadRoster()}catch{} } else alert('Delete failed'); }; li.dataset._adm='1'; }
  let inFlight=false; async function maybeAdorn(){ const key=adminKey(); if(!key){ lastKey=''; return; } if(key&&key===lastKey&&inFlight) return; lastKey=key; inFlight=true; try{ const lis=rosterWrap.querySelectorAll('ul li'); if(!lis.length)return; for(const li of lis){ await adornOne(li); } } finally { inFlight=false; } }
  const keyInput=document.getElementById('adminKey'); keyInput && keyInput.addEventListener('input', ()=>{ cache=null; setTimeout(maybeAdorn,150); });
})();